首先我们从简单的例子找一下规律，我们不看真的字母排序而是指看字母所在位置的排序。假设我们有n个字母，那么我们就有1到n这n个位置。

一： 2排的时候，1到n的排序
1 3 5 7 9  。。。
2 4 6 8 10 。。。


二： 3排的时候，1到n的排序
1   5   9  。。。
2 4 6 8 10 。。。
3   7   11 。。。

三： 4排的时候，1到n的排序
1    7       13 。。。 
2  6 8    12 14 。。。
3 5  9  11   15 。。。
4    10      16 。。。

一共有m列；
当是第一排或者最后一排的时候，前一个下标和后一个下标的间隔是2×（m-1）;
每一列的开头一个元素的下标就是这一列的列号；
对于中间的列，下标间隔是2×(m-rowN-1),2×(rowN)交替出现


class Solution {
public:
 string convert(string s, int nRows) {
  string result;
  
  if(nRows == 1) {
    return s;
  }
  
  for(int i = 0; i < nRows; i++) {
    int j = i;
    bool flag = true;
    while(j < s.size()) {
      result.push_back(s[j]);
      
      if(i == 0 || i == nRows - 1) {
        j += 2 * (nRows - 1);
      }
      else {
        if(flag) {
          j += 2 * (nRows - 1 - i);
         flag = false;
       }
        else {
         j += 2 * i;
          flag = true;
        }
      }
   }
 }
  return result;
 }
};
