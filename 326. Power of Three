Given an integer, write a function to determine if it is a power of three.
Follow up:
Could you do it without using any loop / recursion?

一个基本的事实就是如果n是3的x次方，那么以3为低对数后一定是一个整数，否则不是
If log10(n) / log10(3) returns an int (more precisely, a double but has 0 after decimal point), then n is a power of 3. (original post). But be careful here, you cannot use log (natural log) here, because it will generate round off error for n=243. This is more like a coincidence. I mean when n=243, we have the following results:

log(243) = 5.493061443340548    log(3) = 1.0986122886681098
   ==> log(243)/log(3) = 4.999999999999999

log10(243) = 2.385606273598312    log10(3) = 0.47712125471966244
   ==> log10(243)/log10(3) = 5.0


class Solution {
public:
    bool isPowerOfThree(int n) {
        if(n==0)
            return false;
        double a=(log10(n)/log10(3));
        if((a-static_cast<int>(a))==0)
            return true;
        else
            return false;
            
    }
};
