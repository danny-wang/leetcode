103. Binary Tree Zigzag Level Order Traversal
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        bool flag=true;
        vector<TreeNode*> level_nodes;
        vector<vector<int>> result;
        if(root==NULL)
            return result;
        vector<int> mid_result;
        level_nodes.push_back(root);
        while(!level_nodes.empty()){
            vector<TreeNode*> next_level;
            for(auto i : level_nodes){
                if(i->left!= NULL)
                    next_level.push_back(i->left);
                if(i->right!=NULL)
                    next_level.push_back(i->right);
                
            }
            if(flag){
                for(auto it_beg= level_nodes.begin(); it_beg!=level_nodes.end(); it_beg++){
                    mid_result.push_back((*it_beg)->val);
                }
                
                flag=false;
                
            }
            else{
                for(auto it_beg= level_nodes.rbegin(); it_beg!=level_nodes.rend(); it_beg++){
                    mid_result.push_back((*it_beg)->val);
                }
                
                flag=true;
            }
            result.push_back(mid_result);
            mid_result.clear();
            level_nodes.clear();
            level_nodes=next_level;
        }
        return result;
    }
};
