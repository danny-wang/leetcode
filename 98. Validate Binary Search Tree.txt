98. Validate Binary Search Tree
Given a binary tree, determine if it is a valid binary search tree (BST).
Assume a BST is defined as follows:
  ● The left subtree of a node contains only nodes with keys less than the node's key.
  ● The right subtree of a node contains only nodes with keys greater than the node's key.
  ● Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3

Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3

Binary tree [1,2,3], return false.

【暴力遍历法】【AC】
从根节点开始递归，遍历所有的节点。并且在每个节点处，分别遍历其左右子树，判断其左子树的最大值比其小，右子树的最小值比其大。
时间复杂度为O(n^2)。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(root==NULL)
            return true;
        else if(!isValidLeft(root->left, root->val) || !isValidRight(root->right,root->val))
            return false;
        else
            return (isValidBST(root->left) && isValidBST(root->right));
        
    }
    bool isValidLeft(TreeNode* left, int val){
        if(left==NULL)
            return true;
        else if(left->val>=val)
            return false;
        else
            return (isValidLeft(left->left, left->val) && isValidRight(left->right,left->val));
    }
    bool isValidRight(TreeNode* right, int val){
        if(right==NULL)
            return true;
        else if(right->val<=val)
            return false;
        else
            return (isValidLeft(right->left, right->val) && isValidRight(right->right,right->val));
    }
};
