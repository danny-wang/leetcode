74. Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
  ● Integers in each row are sorted from left to right.
  ● The first integer of each row is greater than the last integer of the previous row.
For example,
Consider the following matrix:
[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]

Given target = 3, return true.
思路：两个for循环，先判断在那一行，然后在这一行寻找。

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row_num=matrix.size();
        int col_num=matrix[0].size();
        int mid=0;
        vector<int> row;
        for(int i=0;i<row_num;i++){
            row.push_back(matrix[i][0]);
        }
        int left=0, right=row_num-1;
        cout<<left<<"---"<<right<<"---"<<row[left+(right-left)/2]<<endl;
        int val=0;
        while(left<=right){
            mid=left+(right-left)/2;
            val=row[left+(right-left)/2];
            if(val==target)
                return true;
            else if(val>target)
                right=mid-1;
            else
                left=mid+1;
        }

        
        if(row[mid]>target ){
              if(mid == 0){
                return false;
            }
            mid--;//mid-1
        }
         
        row.clear();
        for(int i=0;i<col_num;i++){
            row.push_back(matrix[mid][i]);
        }
        left=0;
        right=col_num-1;
        mid=0;
        while(left<=right){
            mid=left+(right-left)/2;
            val=row[left+(right-left)/2];
            if(val==target)
                return true;
            else if(val>target)
                right=mid-1;
            else
                left=mid+1;
        }
        
        return false;
        
    }
};
