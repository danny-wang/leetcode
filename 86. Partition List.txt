86. Partition List
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
 思路是将list按X分成两段
    	 * 小于的连接p
    	 * 大于的连接q
    	 * 最后合并p和q即可

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) 
    {
        if(head== NULL || head->next==NULL)
            return head;
        ListNode *p=new ListNode(0); //node less than x
        ListNode *pptr=p;
        ListNode *q=new ListNode(0); //node bigger than x
        ListNode *qptr=q;
        ListNode *del_ptr;     //the node will be delete
        while(head!=NULL){
            if(head->val<x){
                ListNode *temp=new ListNode(head->val);
                pptr->next=temp;
                pptr=temp;
            }
            else{
                ListNode *temp=new ListNode(head->val);
                qptr->next=temp;
                qptr=temp;
            }
            del_ptr=head;
            head=head->next;
            delete del_ptr;
        }
        if(p->next==NULL)
            ;
        else
            pptr->next=NULL;
        if(q->next==NULL)
            ;
        else
            qptr->next=NULL;
        if(p->next==NULL)
            return q->next;
        else{
            pptr->next=q->next;
            return p->next;
        }
            
    }
};
