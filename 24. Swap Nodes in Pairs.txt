Given a linked list, swap every two adjacent nodes and return its head.
For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
建立新链表每次插入ret->next后在插入ret，需要在判断下若最后只有一个结点不需要交换，注意每次交换了结点要把尾结点的下一个指向空

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode *swap_list=new ListNode(0);
        ListNode *ite=head;
        ListNode *cur=swap_list;
        if(head==NULL || head->next==NULL)
            return head;
        while(ite && ite->next){
            ListNode *ite3=ite->next->next;
            cur->next=ite->next;
            cur->next->next=ite;
            ite->next=NULL;
            cur=ite;
            ite=ite3;
        }
        if(ite){
            cur->next=ite;
            ite->next==NULL;
        }
        return swap_list->next;
            
        
    }
};
