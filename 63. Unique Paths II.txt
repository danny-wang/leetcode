63. Unique Paths II

Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]

The total number of unique paths is 2.
Note: m and n will be at most 100.
思路：动态规划
对于格点(i,j)。由于只能从上格点(i-1,j)或左格点(i,j-1)到达，并且两者路径是不重复的
因此path[i][j] = path[i-1][j]+path[i][j-1]
但因为有的格点有障碍，所以必须处理有障碍的情况。
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.size()==0)
            return 0;
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>> path=obstacleGrid;
        for(auto &i: path){
            for(auto &j : i){
                if(j==1)
                    j=0;
                else
                    j=1;
            }
        }
        for(int i=1;i<n;i++){
            if(path[0][i-1]==0)
                path[0][i]=0;
        }
        for(int i=1;i<m;i++){
            if(path[i-1][0]==0)
                path[i][0]=0;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(obstacleGrid[i][j]==1)
                    path[i][j]=0;
                else if(obstacleGrid[i-1][j]!=1 && obstacleGrid[i][j-1]!=1)
                    path[i][j]=path[i-1][j]+path[i][j-1];
                else if(obstacleGrid[i-1][j]==1 && obstacleGrid[i][j-1]!=1 )
                    path[i][j]=path[i][j-1];
                else if( obstacleGrid[i-1][j]!=1 && obstacleGrid[i][j-1]==1)
                    path[i][j]=path[i-1][j];
                else
                    path[i][j]=0;
            }
        }
        return path[m-1][n-1];
            
    }
};
