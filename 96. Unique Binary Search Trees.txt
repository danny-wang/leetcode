96. Unique Binary Search Trees
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
For example,
Given n = 3, there are a total of 5 unique BST's.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

Subscribe to see which companies asked this question
解法
本题是一道比较容易的动态规划，对于一颗二叉树，简单来说可以分为：
     根节点
    /     \
 左子树   右子树
假如整个树有 n 个节点，根节点为 1 个节点，两个子树平分剩下的 n-1 个节点。
假设我们已经知道节点数量为 x 的二叉树有dp[x]种不同的形态。
则一颗二叉树左节点节点数量为 k 时，其形态数为dp[k] * dp[n - 1 - k]。
而对于一颗 n 个节点的二叉树，其两个子树分配节点的方案有 n-1 种：
(0, n-1), (1, n-2), ..., (n-1, 0)
因此我们可以得到对于 n 个节点的二叉树，其形态有：
Sigma(dp[i] * dp[n-1-i]) | i = 0 .. n-1
并且可以发现，dp数组有递推关系，我们可以使用递推或是记忆化搜索来实现。
边界条件为dp[0] = 1。
参考代码就为记忆化搜索的版本。

class Solution {
public:
    int numTrees(int n) {
        int result[n+1]={0};
        result[0]=1;
        result[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=0;j<i;j++){
                result[i]+=result[j]*result[i-1-j];
            }
        }
        return result[n];
    }
};
