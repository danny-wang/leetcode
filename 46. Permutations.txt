Given a collection of distinct numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

动态规划
每次选择一个没有选过的数字，直到选择的路径长度和nums 一致。

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> path;
        bool signal[nums.size()]={false};
        helper(result,path,signal,nums);
        return result;
        
    }
    void helper(vector<vector<int>>& result, vector<int> path, bool signal[], vector<int>& nums){
        if(path.size()==nums.size()){
            result.push_back(path);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(signal[i]==false){
                signal[i]=true;
                path.push_back(nums[i]);
                helper(result,path,signal,nums);
                path.pop_back();
                signal[i]=false;
            }
            else
                continue;
        }
        return;
    }
};
