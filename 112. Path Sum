Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1

return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
Subscribe to see which companies asked this question

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if(!root)
            return false;
        bool has_path=false;
        helper(root, sum, 0, has_path);
        return has_path;
    }
    void helper(TreeNode* p, int sum, int current_sum, bool& has_path){
        current_sum=current_sum+p->val;
        if((!(p->left))&&(!(p->right))){
            if(sum==current_sum)
                has_path=true;
        }
        else{
            if(p->left){
                helper(p->left,sum, current_sum, has_path);
            }
            if(p->right){
                helper(p->right,sum, current_sum, has_path);
            }
        }
    }
};
