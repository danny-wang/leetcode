
94. Binary Tree Inorder Traversal
 Given a binary tree, return the inorder traversal of its nodes' values.
For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3

return [1,3,2].
Note: Recursive solution is trivial, could you do it iteratively?
Subscribe to see which companies asked this question

Recursive solutionï¼š
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> result;
    vector<int> inorderTraversal(TreeNode* root) {
       
        if(root!=NULL){
            inorderTraversal(root->left);
            result.push_back(root->val);
            inorderTraversal(root->right);
        }
        return result;
    }
};

iteratively:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
       vector<int> result;
       stack<TreeNode*> TNstack;
       while(!TNstack.empty() || root!=NULL){
           if(root!=NULL){
               TNstack.push(root);
               root=root->left;
           }
           else{
               TreeNode *p=TNstack.top();
               result.push_back(p->val);
               TNstack.pop();
               root=p->right;
           }
       }
       return result;
       
    }
};
