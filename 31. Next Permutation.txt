Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

哎，我那捉急的英语水平让我都看不懂题目，只能去翻谷歌翻译了……
什么字典序，又不是字母……排列？什么鬼……
后来才发现原来是数学中的排列组合，比如“1，2，3”的全排列，依次是：
1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1
所以题目的意思是，从上面的某一行重排到期下一行，如果已经是最后一行了，则重排成第一行。
但是也不能根据给出的数组中的数字列出所有排列，因为要求不能占用额外的空间。
分析
网上看来一个示例，觉得挺好的，也没必要另外找一个了。
6 5 4 8 7 5 1
一开始没看对方的后面介绍，就自己在想这个排列的下一个排列是怎样的。
首先肯定从后面开始看，1和5调换了没有用。

7、5和1调换了也没有效果，因此而发现了8、7、5、1是递减的。

如果想要找到下一个排列，找到递增的位置是关键。

因为在这里才可以使其增长得更大。

于是找到了4，显而易见4过了是5而不是8或者7更不是1。

因此就需要找出比4大但在这些大数里面最小的值，并将其两者调换。

那么整个排列就成了：6 5 5 8 7 4 1

然而最后一步将后面的8 7 4 1做一个递增。
扩展
在C++标准库中还有一个函数next_permutation，其正是用于求一个数字序列的下一个排序。
void nextPermutation(vector<int> &num) {  
    next_permutation( num.begin(), num.end() );  
}  


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int index = nums.size() - 1;
        while(nums[index] <= nums[index-1]) {
            --index;
        }
        if(index == 0) {
            sort(nums.begin(), nums.end());
            return ;
        }
        index--;
        int val=nums[index];
        int sign=0;
        int i=0;
        for( i=nums.size()-1;;i--){
            if(nums[i]>val)
                break;
            else
                ;
        }
        int medium=nums[index];
        nums[index]=nums[i];
        nums[i]=medium;
        sort(nums.begin()+index+1,nums.end());  
    }
};

