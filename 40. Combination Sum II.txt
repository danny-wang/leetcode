Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums toT.
Each number in C may only be used once in the combination.
Note:
  ● All numbers (including target) will be positive integers.
  ● The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
与３９题很类似，注意这里的ｐｏｓ表示的是下次次添加元素从ｐｏｓ这个位置开始，为了防止有重复元素，加一个判断。如果和前一个元素相同就跳过。
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<int> path;
        vector<vector<int>> result;
        helper(candidates,0,0,target,path,result);
        return result;
    }
    void helper(vector<int>& nums, int pos,int base, int& target, vector<int> path, vector<vector<int>>& result){
        if(base==target){
            result.push_back(path);
            return;
        }
        else if(base>target)
            return;
        else{
            for(int i=pos;i<nums.size();i++){
                if(pos!=i && nums[i]==nums[i-1])
                    continue;
                path.push_back(nums[i]);
                helper(nums, i+1,base+nums[i],target,path,result);
                path.pop_back();
            }
        }
    }
};
