Given a sorted array of integers, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
先用２分查找找到一个ｔａｒｇｅｔ，然后向前向后分别找到两个端点。
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left=0;
        int right=nums.size()-1;
        int medium=0;
        int sign_l=0;
        int sign_r=0;
        vector<int> result;
      
        while(left<=right){
            medium=left+((right-left)/2);
            if(nums[medium]==target)
                break;
            if(nums[medium]>target){
                right=medium-1;
            }
            if(nums[medium]<target){
                left=medium+1;
            }
        }
        if(left>right){
            result.push_back(-1);
            result.push_back(-1);
            return result;
        }
        sign_l=medium;
        sign_r=medium;
        for(int i=medium-1;i>=0;i--){
            if(nums[i]==target)
                sign_l=i;
            else
                break;
        }
        for(int i=medium+1;i<nums.size();i++){
            if(nums[i]==target)
                sign_r=i;
            else
                break;
        }
        
        result.push_back(sign_l);
        result.push_back(sign_r);
        return result;
        
    }
    
};
