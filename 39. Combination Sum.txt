Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
The same repeated number may be chosen from C unlimited number of times.
Note:
  ● All numbers (including target) will be positive integers.
  ● The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 

ＤＦＳ：深度优先搜索
我觉得就是动态规划。先排序，然后构造方程。
ｆ(vector<int>& candidates, int pos, int base, int target , vector<int> &path, vector<vector<int>> &result)
第一步　ｐｏｓ和ｂａｓｅ都是０，
然后　分别放入从ｐｏｓ到ｃａｎｄｉｄａｔｅｓ中的最后一个元素，ｂａｓｅ加上相应的值，如果等于ｔａｒｇｅｔ就放入ｒｅｓｕｌｔ，如果大于，就放弃这条线，ｒｅｔｕｒｎ,否则继续执行放入一个新元素的操作，重复本步。　
这样就生成来所有可能的情况。
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<int> path;
        vector<vector<int>> result;
        helper(candidates,0,0,target,path,result);
        return result;
    }
    void helper(vector<int>& nums, int pos,int base, int& target, vector<int> path, vector<vector<int>>& result){
        if(base==target){
            result.push_back(path);
            return;
        }
        else if(base>target)
            return;
        else{
            for(int i=pos;i<nums.size();i++){
                path.push_back(nums[i]);
                helper(nums, i,base+nums[i],target,path,result);
                path.pop_back();
            }
        }
    }
};
